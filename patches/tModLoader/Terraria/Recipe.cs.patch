--- src/Terraria/Terraria/Recipe.cs
+++ src/tModLoader/Terraria/Recipe.cs
@@ -3,10 +_,11 @@
 using Terraria.GameContent.Achievements;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
-	public class Recipe
+	public partial class Recipe
 	{
 		public static int maxRequirements = 15;
 		public static int maxRecipes = 3000;
@@ -72,7 +_,7 @@
 				if (num == -1)
 					break;
 
-				if (RecipeGroup.recipeGroups[num].ValidItems.Contains(type)) {
+				if (RecipeGroup.recipeGroups[num].ContainsItem(type)) {
 					theText = RecipeGroup.recipeGroups[num].GetText();
 					return true;
 				}
@@ -88,7 +_,7 @@
 				if (num == -1)
 					break;
 
-				if (RecipeGroup.recipeGroups[num].ValidItems.Contains(invType) && RecipeGroup.recipeGroups[num].ValidItems.Contains(reqType))
+				if (RecipeGroup.recipeGroups[num].ContainsItem(invType) && RecipeGroup.recipeGroups[num].ContainsItem(reqType))
 					return true;
 			}
 
@@ -113,6 +_,13 @@
 					break;
 
 				int num = item2.stack;
+
+				if (this is ModRecipe modRecipe && modRecipe.ConsumeItemHooks != null) {
+					foreach (var func in modRecipe.ConsumeItemHooks.GetInvocationList()) {
+						num = ((ModRecipe.ConsumeItemCallback)func).Invoke(modRecipe, item2.type, num);
+					}
+				}
+
 				if (alchemy && Main.player[Main.myPlayer].alchemyTable) {
 					if (num > 1) {
 						int num2 = 0;
@@ -193,6 +_,9 @@
 		}
 
 		public bool useWood(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Wood];
+			return anyWood && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyWood)
 				return false;
 
@@ -221,9 +_,13 @@
 							return true;
 					}
 			}
+			*/
 		}
 
 		public bool useIronBar(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.IronBar];
+			return this.anyIronBar && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyIronBar)
 				return false;
 
@@ -234,9 +_,13 @@
 				return false;
 
 			return true;
+			*/
 		}
 
 		public bool useSand(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Sand];
+			return this.anySand && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (reqType != 169 && reqType != 408 && reqType != 1246 && reqType != 370 && reqType != 3272 && reqType != 3338 && reqType != 3274 && reqType != 3275)
 				return false;
 
@@ -244,9 +_,13 @@
 				return true;
 
 			return false;
+			*/
 		}
 
 		public bool useFragment(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.Fragment];
+			return this.anyFragment && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (reqType != 3458 && reqType != 3456 && reqType != 3457 && reqType != 3459)
 				return false;
 
@@ -254,9 +_,13 @@
 				return true;
 
 			return false;
+			*/
 		}
 
 		public bool usePressurePlate(int invType, int reqType) {
+			RecipeGroup rec = RecipeGroup.recipeGroups[RecipeGroupID.PressurePlate];
+			return anyPressurePlate && rec.ContainsItem(invType) && rec.ContainsItem(reqType);
+			/*
 			if (!anyPressurePlate)
 				return false;
 
@@ -285,6 +_,7 @@
 							return true;
 					}
 			}
+			*/
 		}
 
 		public static void GetThroughDelayedFindRecipes() {
@@ -402,7 +_,7 @@
 							flag = false;
 					}
 
-					if (flag) {
+					if (flag && RecipeHooks.RecipeAvailable(Main.recipe[n])) {
 						Main.availableRecipe[Main.numAvailableRecipes] = n;
 						Main.numAvailableRecipes++;
 					}
@@ -451,6 +_,8 @@
 			RecipeGroupID.Turtles = RecipeGroup.RegisterGroup("Turtles", rec);
 			rec = new RecipeGroup(() => Lang.misc[37].Value + " " + Language.GetTextValue("Misc.Fruit"), 4009, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297);
 			RecipeGroupID.Fruit = RecipeGroup.RegisterGroup("Fruit", rec);
+			RecipeGroupHelper.AddOldVanillaGroups();
+			RecipeGroupHelper.AddRecipeGroups();
 		}
 
 		public static void SetupRecipes() {
@@ -13052,7 +_,10 @@
 			AddRecipe();
 			CreateReverseWallRecipes();
 			CreateReversePlatformRecipes();
+			RecipeHooks.AddRecipes();
+			RecipeHooks.PostAddRecipes();
 			UpdateWhichItemsAreMaterials();
+			Item.PopulateMaterialCache();
 			UpdateMaterialFieldForAllRecipes();
 		}
 
